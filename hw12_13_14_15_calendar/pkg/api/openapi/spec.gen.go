// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVy27bOhD9FWLuXeQCQuzbBl14l8RB4U0bpGk3gReMOLKZio+Qw6SGoX8vSEqRH3Ie",
	"Rbqj6Zkzw3POjNZQGmWNRk0eJmvw5RIVT8cL54yLB+uMRUcS07VC7/kC45FWFmECnpzUC2iaAhzeB+lQ",
	"wOTmKXBedIHm9g5LgqaAiwfUFCF4XX+tYHKzhn8dVjCBf0Z9Q6O2m9EXfMwZTbHbjhQvdyLFQBPzrg1/",
	"iU6aBIM6qJgg+AoKeET8CQUoo2m5AdAVKeCprT2SBPrSSUvS6L2fuSrbvBvAFsHx4fRp+w8zFeOaYUI7",
	"kpopqQOh/6+Hk5pwgS7iaUOyWp1hZRzuY54qEzRFxBaEkWE5hQWPjt2mREZLzAUHa3jijq6lwkNvTgFM",
	"cEJ2FLT8xUgq9MSVjU1XxilOGfLTyWAFklQfRM9/Fi+YoYvqm90gu4BtWbZY2/dQxJa6MsmCuTU45zVq",
	"wR27uvh2zU4vZ1DAAzqfOx0f/388ji8xFjW3EibwMV0VYDktk3lGieF0XGAyV7RWanAmYAKfkbJxU5Lj",
	"CgmdT0MkY437gC76V/OoBNhs700WyAUs2lmP+M/N3taMNHEAh4pETZ8tsS1Yhmv98CdWaOaxmLdG+zxx",
	"H8bj/TJXSE7iA3rGWS19Mngml1XGMW+xlJVEwezT88AHpbhbZZ53sqJw1vgBTS6N70WJLKCnMyNWMbI0",
	"mrp1Z20ty5Q2uvN5ul8nQ78Ctw0deW6GuXiXuhtFh2audMgJRSTm5D2rpm/PQNUfvJYirz9sYzYlO0/t",
	"MI2P7ZqKgoUhvcLfleutWg1xG6zouT05FKUNscoEveve7ym7o6EpurUyWkvRZLAaCfepmab7zM5semDH",
	"xGXVT78Ub5j9/MFKKbubev56cnwoS/S+CnW9Yvkpuwzkh/TfyNsVm02jJs3vAAAA//+z4AwJ9ggAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
