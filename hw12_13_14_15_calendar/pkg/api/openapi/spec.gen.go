// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVwVLbMBD9Fc22BzrjktBwqW9AaCeXlqG0F4aDsNaJqC0JaQWTyfjfO5JinMQOlA69",
	"Kc7ue6v3dlcrKHRttEJFDvIVuGKBNY/Hc2u1DQdjtUFLEuPnGp3jcwxHWhqEHBxZqebQNBlYvPfSooD8",
	"+inwJmsD9e0dFgRNBucPqChA8Kr6XkJ+vYL3FkvI4d2oK2i0rmb0DR9TRpPtliPFy5VIMVDETVuGu0Ar",
	"dYRB5euQIPgSMnhE/A0Z1FrRYgOgJcngqayeSAJdYaUhqVXvZ2Jlm98GsIW3fDh9uv6H6ZJxxTCiHUjF",
	"aqk8ofvQwUlFOEcb8JQmWS5PsdQW+5gntfaKAuIahJFmKYV5h5bdxkRGC0yEgxyOuKUrWeO+O8cAJjgh",
	"O7j8cjaZTD6zUtuaUyg6nSCHEPCRAs6AMCSp2kuQ/sxe6Ic2qqt3Q+8Mtp3ZEq7fRgFbqlLHLkylwRmv",
	"UAlu2eX5jyt2cjGDDB7QulTp+PDocBxuog0qbiTkMImfMjCcFrF/RlHkeJxj7K/QXbHAmYAcviKl3o1J",
	"ltdIaF2cIxk47j3a0MKKBzPApA7fVIGsx2w97gH/ufHbGpMmzOAQSXDtWYptwxLcG7REcxNIndHKpeH7",
	"NB736S6RrMQHdIyzSrrY60nkQMecwUKWEgUzT9cE5+ua22XSeycrGGi0G/DmQrvOnKAGOjrVYhkiC62o",
	"3XzGVLKIaaM7lwb97+zotuF2Ywe9m54WR2/Gu0E6NHuFRU4ogjDHyYG3YY3P0ADrL15JkTYhrmM2LTuL",
	"5TCFj+uNFQzzQ375/2vXK7wa79tr3ohO2+N9UUoTK7VXu937M2a3MjRZu15GKymaBFYhYV+aafye1JlN",
	"9+yasLS6LSDFK3ZAertiyj8N9fpV8UWBzpW+qpYsXWVXgXSR7rm8XbLZNHjS/AkAAP//nJ0i4wEJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
