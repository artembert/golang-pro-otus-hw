// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVT1PbPhD9Kpr9/Q7tjEpCw6W+FUI7ubQMpb0wHIS1JqK2JKQ1TCbj796RZGMncfjT",
	"oTdF2X1v9d7ueg25qazRqMlDtgafL7ES8XjqnHHhYJ2x6EhhvK7Qe3GD4Ugri5CBJ6f0DTQNB4d3tXIo",
	"Ibt8DLziXaC5vsWcoOFweo+aAoQoy+8FZJdr+N9hARn8N+kLmrTVTL7hQ8po+HY5Sj5fiZIjRVx1Zfgz",
	"dMpEGNR1FRKkWAGHB8TfwKEympYDgI6Ew2NZOyJJ9LlTlpTROz8TKxvejWDL2onx9Hn7DzMFE5phRHun",
	"NJvJw+WsYoVxlaD3Y6DakCpWx1gYh08AX8cARktkMUPl6V4KwhcyeRKOLlSF+54fA1rE8y8ns9ns0wAv",
	"nSCDEPCBAs4ICSkq9xKkP/kzrdFF9fUOpOewadKGfLsdFbCVLkxsyFQanIgStRSOnZ/+uGCfzxbA4R6d",
	"T5VODw4PpuElxqIWVkEGs3jFwQpaxlaaRIPj8QZjq4VGiwUuJGTwFSm1cUxyokJC5+NIqcBxV6ML3axF",
	"MANsavahCuRq5O3kB/ynJnFjYpowjmMkwbUnKTYNS3Bv0BLNVSD11mif5vDjdLpLd47kFN6jZ4KVylMY",
	"pCRyoGPeYq4KhZLZx2eCr6tKuFXSeysrGGiNH/HmzPjenKAGejo2chUic6OpW4LWlu2MTW59mvmX2dEv",
	"xs3GDno3O1ocvhnvgHRs9nKHglAGYY6SA2/DGr9II6y/RKlk2lHYxgwtO4nlMI0PybFoWD3mV/1v7XqF",
	"V9N9e622stf2aF+UNsQKU+vt7v0ZszsZGt6tl8laySaBlUi4K8083id1FvM9uyYsrX4LKPmKHZA+YzHl",
	"r4a6/arUeY7eF3VZrlh6yrYC6SH9l/N6xRbz4EnzJwAA//9q2i2bDAkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
