// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVTW/bOBD9K8TsHrKANvauc6luSZwWvrRBmvYS5MCII5upRDLkMIFg6L8XJKXIH3LS",
	"FOmNlmfeG743M1xDoWujFSpykK/BFSuseTxeWKttOBirDVqSGD/X6BxfYjhSYxBycGSlWkLbZmDxwUuL",
	"AvKb58DbrA/Ud/dYELQZXDyiogDBq+pLCfnNGv62WEIOf02GgiZdNZPP+JQy2my3HCler0SKkSJu+zLc",
	"JVqpIwwqX4cEwRvI4AnxB2RQa0WrDYCeJIPnsvZEEugKKw1JrfZ+Jla2+W0EW3jLx9Pn3T9Ml4wrhhHt",
	"SCpWS+UJ3T8DnFSES7QBT2mSZXOGpba4j3laa68oIHYgjDRLKcw7tOwuJjJaYSIc5XDELV3LGg/dOQYw",
	"wQnZ0dXH89ls9oGV2tacQtHpBDmEgH8p4IwIQ5KqgwTpz+yVfuijhno39M5g25kt4fbbKGBLVerYhak0",
	"OOcVKsEtu7r4es1OLxeQwSNalyqdHv93PA030QYVNxJymMVPGRhOq9g/kyhyPC4x9lforljgQkAOn5BS",
	"78Yky2sktC7OkQwcDx5taGHFgxlgUodvqkDWY9aNe8B/afy2xqQNMzhGElx7kWLbsAT3Di3R3gZSZ7Ry",
	"afj+n0736a6QrMRHdIyzSrrY60nkQMecwUKWEgUzz9cE5+ua2ybpvZMVDDTajXhzqd1gTlADHZ1p0YTI",
	"QivqN58xlSxi2uTepUH/NTuGbbjd2EHvdlyLd+HdIB2bvcIiJxRBmJP3ZI3P0Ajrd15JkTYhdjGblp3H",
	"cpjCp25jBcP8mF/+z9r1Vq/GtPVGDNqeHIpSmlipvdrt3m8xu5ehzfr1MllL0SawCgn3pZnH70mdxfzA",
	"rglLa9gCUrxhB6S3K6b81lB3r4ovCnSu9FXVsHSVXQXSRYbn8q5hi3nwpP0ZAAD//7e84eoBCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
